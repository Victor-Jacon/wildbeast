/* CSS - RESET */

body, p, h1, ul, li, blockquote {
  padding: 0px;
  margin: 0px;
}

body {
  font-family: "Vollkorn", Georgia, serif; /* Fonte 2 de 2 - Chamamos aqui a fonte, se o sistema do cara não tiver Volkorn, carregaremos georgia, se não tiver também, usaremos qualquer serifada que ele tiver instalada no sistema dele. */
}

li {
  list-style: none;
}

a {
  text-decoration: none;
}

/* CSS - PROJETO */

/* Fonte 1 de 2 - No html a gente copia o <link> do google api, e cola no head do html, no react a gente coloca no css, e importa depois este css no App.js, isso é importante para o build e pro cache. */
@import url('https://fonts.googleapis.com/css2?family=Vollkorn:ital,wght@0,400;0,700;1,400&display=swap');

body {
  background-color: white;
}

.img {
  /* Anuncios 2 de 3 - Ativo o display block pra todas as imagens do site, pra remover uma margem de 4px padrão que todas as imagens tem. + torno as imagens responsivas com max-width 100%, e coloco uma borda padrão de 5px pra combinar com o restante dos locais onde também tenho border radius 5px.*/
  display: block;
  max-width: 100%;
  border-radius: 5px;
}

/* Criação da Estrutura do Grid + Estilização Básica */

.estrutura {
  /* Implementar GRID - 1 de 4 - Ativei o CSS GRID */
  display: grid; 

  /* Implementar GRID - 2 de 4 - Divisão inicial: Dividi o site em pedaços grandes, no começo, coloquei 1fr em cada coluna, até eu decidir quais seriam as proporções ideais. */
  /* 1ª coluna: As imagens svg do sidenav ficam feias se ficarem pequenas demais. Por isso, a primeira coluna terá no mínimo 160x e no máximo 1fr.*/
  /* 2ª coluna: Quero que meu conteúdo tenha 3x mais espaço pra ele do que a coluna da sidenav */
  /* 3ª coluna: Quero que os anúncios tenham um tamanho fixo, porque o google adsense dá imagens de 300px pra gente ganhar dinheiro mostrando anúncios no nosso site. */
  grid-template-columns: minmax(160px, 1fr) 3fr 300px; 

  /* Implementar GRID - 3 de 4 - Mapeei onde cada elemento vai estar. Usei o mesmo nome da className por boa prática */
  /* Area 1: Quero que o header que tem o logo e o menu, ocupe a largura total do site. */
  /* Area 2: Quero que minha sidenav com os animais em svg aparecem na lateral esquerda, o conteúdo no centro, e os anúncios na direita. */
  /* Area 3: Quero que meu footer ocupe a largura total do site. */
  grid-template-areas: 
    "header header header"
    "sidenav content anuncios"
    "footer footer footer"
  ;
}

/* Implementar GRID - 4 de 4 - O elemento que tiver o className = header, será posicionado no espaço nomeado como "header" no grid-template-areas */
/* Repeti o mesmo processo pra todas as outras classes, sidenav posicionado em sidenav, content posicionado em content. Nome da classe tem que ser igual ao do espaço reservado, por boa prática */
.header {
  grid-area: header;
  background: linear-gradient(135deg, #8844ee, #B07DFB);
  padding: 30px;

  /* Implementar grid do header - 2 de 2 */
  /* Para atingirmos o resultado desejado, precisamos de 2 estruturas dentro da div com className=header */
  /* Eu crio um grid separado para o header do site, e alinho eles na vertical ao centro. */
  display: grid;
  grid-template-columns: 1fr auto;
  align-items: center;
}

.sidenav {
  grid-area: sidenav;
}

.content {
  grid-area: content;
}

.anuncios {
  grid-area: anuncios;
}

.footer {
  grid-area: footer;
}

/* ESTILIZAÇÃO - HEADER*/
.logo {
  max-width: 200px; /* */
}

.header nav ul {
  display: flex; /* Menu - 1 de 2 - Coloca os itens na horizontal  */
  flex-wrap: wrap; /* Menu - 2 de 2 - Habilita a quebra de linha  */
}

.header nav a {
  display: block;

  /* Menu Estilo 1 de 3 - Cor branca na fonte + 18px de tamanho (1.125em)+ Crio uma area de contato maior pra o usuário conseguir apertar o botão*/
  padding: 10px; 
  color: white; 
  font-size: 1.125em;

  /* Menu Estilo 2 de 3 - Bordinha arredonda + Camada mais escura pra diferenciar o menu + transição de hover, quando o usuário colocar E tirar o mouse, em ambos momentos vai ter uma transição, não vai ser instantâneo*/
  border-radius: 5px;
  background: rgba(0,0,0,.1); 
  transition: 0.1s;
}

.header nav a:hover {
  background: rgba(0,0,0,.5);
  /* Um erro comum seria colocar o transition 0.1s aqui, desta maneira o item teria uma transição na hora de passar o mouse por cima, mas na hora de tirar, ele sairia instantâneamente, o que prejudica a experiência.*/
}

/* Menu Estilo 3 de 3 - Um erro comum é colocar margin left ou margin right pra colocar um espaço entre os links do menu. Mas isso fere o responsivo. O margin left só fica legal no desktop, e o margin right, só fica legal no mobile, pq ambos não consideram a quebra de tela.*/
/* Ao invés de marcarmos header li, a gente coloca li+li, que é o que chamamos de adjacente. */
/* li+li significa: cada li que vier depois de um li, quero que faça a seguinte estilização... */
.header li + li {
  margin-left: 30px; /* No primeiro ele não vai adicionar, pq o primeiro <li> não vem depois de outro li. */
}

/* SIDENAV */

.sidenav {
  background: #fafbfc;
  padding: 30px; /* Sidenav 1 de 5 - Deixo um espaço maior para meu container de navegação, tirando este espaço dos meus <li>, pra chegar num design mais harmônico. Sem colocar esse espaçamento, o quadradinho branco ficaria colado no conteúdo, e ficaria feio.*/
}

.sidenav li a {
  /* Sidenav 2 de 5 - Os icones svg vão ter no mínimo 60px, e no máximo 100px + o comportamento padrão aqui é inline, então a gente especifica que queremos display block pra ficar um em cima do outro*/
  display: block;
  min-width: 60px;
  max-width: 100px;

  /* Sidenav 3 de 5 - 0px de distancia do topo, automático nas laterais pra ficar centralizado, e 30px embaixo + colocamos o link pra ficar branco, e o fundinho continua cinza. */
  margin: 0 auto 30px auto;
  background: white;

  /* Sidenav 4 de 5 - Com padding 20px eu Diminuo o tamanho dos icones svg, pra dar mais espaço para o meu <li> + arredondo as bordas + coloco a sombra pra parecer que tem uma profundidade no site. + coloco uma transição pra quando eu der hover no elemento ele entrar e sair de leve ao invés de ser algo abrupto */
  padding: 20px; 
  border-radius: 5px;
  box-shadow: 5px 5px 15px 0px rgba(44,44,44,0.15);
  transition: .1s ease-out;
}

.sidenav li a:hover {
  /* Sidenav 5 de 5 - Coloco a cor roxa para meu hover + */
  background: #B07DFB;
}

/* CONTENT */

.content {
  max-width: 900px; /* Em monitores grandes, se a gente não colocar um max-width como este, todo o texto do site vai ficar em uma só linha, e aí fica ruim pra ler pq fica mt largo o parágrafo.*/
  margin: 0 auto; /* Do mesmo jeito acima, quando cresce demais o container, ele vai começar a criar um espaço em branco no lado direito do conteúdo, pra corrigir isso usamos margin 0 auto, desta forma o conteúdo ficará alinhado.*/
  padding: 30px; /* Colocamos o mesmo padding de 30px que os outros elementos possuem, desta forma o conteúdo fica alinhado + o conteudo desgruda das laterais do site, dando uma aparencia mais harmonica*/ 
  
  /* Crio o grid do conteúdo, de forma similar ao que fiz no header. */
  display: grid;
  grid-template-columns: 1fr 1fr;
  grid-gap: 30px;
}

.col-wide {
  /* Um erro comum seria contar quantas linhas o site tem atualmente, e colocar, por exemplo grid-column: 1 / 5, isso é codificar de forma estática, se a nossa finalidade é que se expanda até o final da linha, usamos o -1, assim mesmo que a gente adicione novas colunas, ele sempre vai ir até o final. Desta forma, a gente não precisa ficar alterando aqui o código toda vez que alterarmos a estrutura do grid, como por exemplo, quando alteramos a quantidade de colunas.*/
  /* O conteúdo que tiver a classe col-wide, vai começar na linha 1, e vai até a última linha. */
  grid-column: 1 / -1; 
}

.imagem-1 {
  /* Um erro comum seria definir de forma estática onde inicia, e onde termina a linha, tipo da linha 3 até linha 5. Caso fizéssemos de forma estática, caso no futuro a gente mudasse alguma coisa no site, ia quebrar o layout.*/
  /* O grid row span 2, diz que, o elemento que tiver a classe imagem-1, vai expandir para 2 linhas, isso torna o grid dinâmico. */
  grid-row: span 2; 

  /* Alinhamos a imagem 1 com a imagem 2, na base. Sem esta linha, a imagem 1 ficaria mais alta que a imagem 2.*/
  align-self: end;
}

.item-2 {
  align-self: end;
}

/* ESTILOS CONTENT */

p {
  font-size: 1.2em;
  line-height: 1.6;
  letter-spacing: -0.005em; /* Diminui um pouco a distancia entre as letras, tornando o texto mais "colado" em algumas fontes isso dá um efeito legal, por isso colocamos aqui. */
  color: rgba(0,0,0,.7) /* Criamos um tom de cinza pra facilitar a leitura */
}

/* Queremos estilizar o P que vem depois de outro p, pra evitar a estilização do primeiro elemento, igual fizemos com o li + li em outro momento neste projeto. */
.informacoes p + p {
  margin-top: 30px;
}

/* TÍTULO */
.titulo {
  color: #B07DFB;
}

.titulo h1 {
  font-size: 3.75em;
  line-height: 1; /* Resetamos o padrão do line height para a linha de cima e a linha de baixo ficarem mais coladas*/
  font-weight: 700; /* Colocamos o 700 porque é o valor que importamos da tipografia do google fonts */
}

.titulo span {
  font-size: 0.875em;
  font-style: italic;
}

/* Características */

.caracteristicas {
  display: flex; /* Coloca um do lado do outro, igual fizemos do menu/header */
  
  /* Sem esta linha, quando a tela diminui de tamanho, a div de características passa a ocupar 2 linhas de altura, porque ela está dentro do mesmo container do texto "Lobo Cinza", basta ver o html ou o projeto final.
  /* Colocando o flex-start, ela não vai expandir para baixo mais. O align e o justify não só alinham, eles também alteram como o elemento se expande quando tem espaço sobrando no container. */ 
  align-items: flex-start; 
}

/* A seta > significa que eu só quero estilizar as divs FILHAS DIRETAS do elemento que possui a classe características. Desta forma, se eu estiver uma estrutura com 2 divs filhas, e cada filha com mais 2 divs, essas divs FILHAS DAS FILHAS, não seriam afetadas por esta estilização. */
.caracteristicas > div {
  width: 80px; 
  text-align: center;
  background: linear-gradient(135deg, #8844ee, #B07DFB);
  border-radius: 5px;
  box-shadow: 5px 5px 15px 0px rgba(44,44,44,0.15);

  /* BUG COR ROXA - 1 de 2 */
  /* Os 2 elementos que eu coloquei pra representar o peso e a idade, ficam com a cor roxa saindo pra fora, por trás da div, se der um zoom no canto direito inferior vc consegue ver. */
  /* Pra corrigir, vamos colocar estes 2 spans 2px pra baixo. */
  position: relative;
}

/* A seta > significa que eu só quero estilizar as divs FILHAS DIRETAS do elemento que possuir a classe características */
/* Além disso, quero estilizar apenas a primeira div filha, e não todas as filhas, ou seja, são duas condições aqui. */
.caracteristicas > div:first-child {
  margin-right: 30px;
}

.caracteristicas span {
  display: block; /* O comportamento padrão do elemento span, é ser inline. A gente coloca display block, desta maneira, fica 1 coluna em cima da outra.*/
  color: #B07DFB;
}

/* A classe numero e rotulos, ambos são elementos <span> dentro da classe caracteristicas, então a gente coloca a cor apenas uma vez, e o display block tb, conforme fizemos acima.*/

.numero {
  font-size: 3em;
  line-height: 1;
  margin: 10px auto;
}

.rotulo {
  background: white;
  border-radius: 0 0 5px 5px; /* TOPO ESQUERDO + TOPO DIREITO: É reto, sem arredondamento, e base direita e esquerda ficam redondos. */
  padding: 5px 0; /* Aumento a grossura do meu span para cima e para baixo em 5px */

  /* BUG COR ROXA - 2 de 2 */
  /* Criamos uma referência para podermos usar o top, bottom e etc da forma correta, colocando relative aqui no nosso span rotulo, e relative na nossa div filha DIRETA do características. */
  /* Colocamos 2px pra baixo o nosso span, pra tampar a cor roxa da div características que estava "vazando" */
  position: relative;
  top: 2px;
}

/* ANUNCIOS */

.anuncios {
  /* Anuncios 1 de 3 - Coloco uma cor de fundo pra eu identificar o que estou editando + ativo display grid + faço as imagens se alinharem ao início do container, pra elas "subirem", se eu tiro o align start, fica uma imagem, um espaço em branco, e outra imagem. */
  background: #fafbfc;
  display: grid;
  align-content: start; 

  /* Anuncios 3 de 3 - Adiciono um espaçamento da imagem para o container anuncios + coloco uma distancia de 30px entre uma imagem e a outra +  */
  padding: 30px;
  grid-gap: 30px; 
}

/* FOOTER */

.footer {
  /* Footer 1 de 2 - Coloco a cor roxa gradiente */
  background: linear-gradient(135deg, #8844ee, #B07DFB);
}

.footer p {
  /* Footer 2 de 2 - Estilizo a fonte com cor branca + alinho ao centro + coloco 30px de grossura no elemento */
  color: white;
  text-align: center;
  padding: 30px;
}